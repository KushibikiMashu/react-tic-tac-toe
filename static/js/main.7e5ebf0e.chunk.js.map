{"version":3,"sources":["components/Square.tsx","components/Board.tsx","components/Game.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","value","onClick","isComplete","className","style","backgroundColor","undefined","Board","squares","lines","map","i","multiplied","key","includes","renderSquare","calculateWinner","length","a","b","c","mark","Game","useState","Array","fill","number","history","setHistory","xIsNext","setNext","stepNumber","setStepNumber","row","col","locations","setLocations","asc","toggle","moves","slice","reverse","step","move","desc","fontWeight","jumpTo","status","location","currentSquares","winner","targetNumber","target","concat","newLocations","Math","floor","handleClick","App","paddingBottom","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e5ebf0e.chunk.js","sourcesContent":["import React from 'react';\nimport { SquareMark } from '../types/types';\n\ntype Props = {\n  value: SquareMark;\n  onClick: () => void;\n  isComplete: boolean;\n};\n\nconst Square: React.FC<Props> = ({ value, onClick, isComplete }) => {\n  return (\n    <button\n      className=\"square\"\n      style={isComplete ? { backgroundColor: 'yellow' } : undefined}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\nimport { Squares } from '../types/types';\n\ntype Props = {\n  squares: Squares;\n  onClick: (i: number) => void;\n  lines: number[] | null;\n};\n\nconst Board: React.FC<Props> = ({ squares, onClick, lines }) => {\n  const renderSquare: React.FC<number> = i => (\n    <Square\n      key={i}\n      value={squares[i]}\n      onClick={() => onClick(i)}\n      isComplete={lines !== null ? lines.includes(i) : false}\n    />\n  );\n\n  const renderSquares = () => {\n    return [0, 1, 2].map(i => {\n      const multiplied = i * 3;\n      return (\n        <div className=\"board-row\" key={i}>\n          {[multiplied, multiplied + 1, multiplied + 2].map(i =>\n            renderSquare(i)\n          )}\n        </div>\n      );\n    });\n  };\n\n  return <div>{renderSquares()}</div>;\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport './Game.css';\nimport { History, Squares, SquareMark, Cell } from '../types/types';\n\nfunction calculateWinner(\n  squares: Squares\n): { mark: SquareMark; lines: number[] } | null {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { mark: squares[a], lines: lines[i] };\n    }\n  }\n  return null;\n}\n\nconst Game: React.FC = () => {\n  const [history, setHistory] = useState<History>([\n    {\n      squares: Array(9).fill(null),\n      number: 0,\n    },\n  ]);\n  const [xIsNext, setNext] = useState<boolean>(true);\n  const [stepNumber, setStepNumber] = useState<number>(0);\n  const [locations, setLocations] = useState<Cell>([\n    {\n      row: null,\n      col: null,\n    },\n  ]);\n  const [asc, toggle] = useState<boolean>(true);\n\n  const orderedHistory = asc ? history : history.slice().reverse();\n  const moves = orderedHistory.map(step => {\n    const move = step.number;\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return (\n      <li key={move}>\n        <button\n          style={move === stepNumber ? { fontWeight: 'bold' } : undefined}\n          onClick={() => jumpTo(move)}\n        >\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  function jumpTo(step: number) {\n    setStepNumber(step);\n    setNext(step % 2 === 0);\n  }\n\n  const location = locations.map((location, i) => {\n    if (location.row === null) return null;\n    return (\n      <li key={i}>\n        <span>row: {location.row}</span>\n        <span>col: {location.col}</span>\n      </li>\n    );\n  });\n\n  const current = history[stepNumber];\n  const currentSquares = current.squares;\n  const winner = calculateWinner(currentSquares);\n\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner.mark;\n  } else if (winner === null && history.length === 10) {\n    status = 'Draw game';\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  function handleClick(i: number) {\n    const targetNumber = stepNumber + 1;\n    const target = history.slice(0, targetNumber);\n    const squares = currentSquares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory(target.concat([{ squares, number: targetNumber }]));\n    setNext(!xIsNext);\n    setStepNumber(target.length);\n\n    const newLocations = locations.slice(0, targetNumber);\n    setLocations(\n      newLocations.concat([\n        {\n          row: Math.floor(i / 3) + 1,\n          col: (i % 3) + 1,\n        },\n      ])\n    );\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={currentSquares}\n          onClick={i => handleClick(i)}\n          lines={winner === null ? null : winner.lines}\n        />\n        <ol>{location}</ol>\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <button onClick={() => toggle(!asc)}>toggle moves order</button>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nconst App: React.FC = () => (\n  <>\n    <div style={{ paddingBottom: 16 }}>\n      <a href=\"https://github.com/KushibikiMashu/tdd-with-react-tic-tac-toe\">\n        See codes on GitHub\n      </a>\n    </div>\n    <Game />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}